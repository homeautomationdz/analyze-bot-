fastapi
uvicorn
websockets
ccxt
pandas
ta-lib
requests
sqlalchemy
python-jose[cryptography]
API Key: y90BdywNvKze8YTucq2nAV0EJ29gy6INt6AMRV34I3cwQLPZuhNVcz4pHAH1YkIb

Secret Key: FQX6DfHPgAq253gs5T2drOyuDMfnNkM7RNsFeuZVxMdbyCDxUYP5l0UPXsWXVAki

Back
start https://download.lfd.uci.edu/pythonlibs/archived/TA_Lib-0.4.24-cp310-cp310-win_amd64.whl

python -m pip install TA_Lib-0.4.24-cp310-cp310-win_amd64.whl


start https://visualstudio.microsoft.com/visual-cpp-build-tools/

winget install Python.Python.3.11
python -m ensurepip --default-pip



python -m pip install ccxt



python -m pip install pandas



python -m pip install ta-lib



python -m pip install requests



python -m pip install numpy


pip install mplfinance



    def setup_gui(self):
        # Create main frames for better organization
        self.control_frame = ttk.Frame(self.master)
        self.control_frame.grid(row=0, column=0, columnspan=12, sticky='nsew', padx=10, pady=5)
        
        # Strategy selection in control frame
        str_manu = ['ALL']
        self.choose_str = tk.StringVar(self.master)
        self.choose_str.set('ALL')
        self.option_str = ttk.OptionMenu(self.control_frame, self.choose_str, *str_manu)
        self.option_str.grid(row=0, column=0, padx=5)

        # Timeframes with proper spacing
        self.timeframes = ['1m', '5m', '15m', '30m', '1h', '4h', '1d']
        self.choose_time = tk.StringVar(self.master)
        self.choose_time.set('15m')
        self.option_time = ttk.OptionMenu(self.control_frame, self.choose_time, *self.timeframes)
        self.option_time.grid(row=0, column=1, padx=5)

        # Market options in organized layout
        list_manu = ['Down', 'Top', 'Best-vol', 'Last-vol']
        self.choose_list = tk.StringVar(self.master)
        self.choose_list.set('Best-vol')
        self.option_list = ttk.OptionMenu(self.control_frame, self.choose_list, *list_manu)
        self.option_list.grid(row=0, column=2, padx=5)

        # Exchange selection with consistent spacing
        list_manu_ex = ['Binance', 'CoinEx', 'Okex', 'BingX']
        self.choose_listex = tk.StringVar(self.master)
        self.choose_listex.set('Binance')
        self.option_listex = ttk.OptionMenu(self.control_frame, self.choose_list, *list_manu_ex)
        self.option_listex.grid(row=0, column=3, padx=5)

        # Control buttons in separate frame
        button_frame = ttk.Frame(self.control_frame)
        button_frame.grid(row=0, column=4, columnspan=2, padx=10)
        
        self.start_button = ttk.Button(button_frame, text='Start Scanning',
                                    style='Green.TButton', command=self.start_scanning)
        self.start_button.pack(side='left', padx=5)
        
        self.stop_button = ttk.Button(button_frame, text='Stop Scanning',
                                style='Red.TButton', command=self.stop_scanning)
        self.stop_button.pack(side='left', padx=5)

        # Market selection controls
        market_frame = ttk.Frame(self.master)
        market_frame.grid(row=1, column=0, columnspan=12, sticky='nsew', padx=10, pady=5)
        
        self.user_choice = tk.IntVar(value=0)
        ttk.Checkbutton(market_frame, text='Custom Markets',
                    variable=self.user_choice).pack(side='left', padx=5)
        
        ttk.Button(market_frame, text='Select Markets',
                command=self.user_choicelist).pack(side='left', padx=5)

        # Use tk.Label instead of ttk.Label for color support
        self.status_label = tk.Label(self.master, text="Scanner Status: Stopped",
                                    font=('Arial', 10), fg='red')
        self.status_label.grid(row=3, column=0, columnspan=4)

        # Initialize dashboard
        self.create_enhanced_dashboard()

    def create_enhanced_dashboard(self):
        self.logger.info("Initializing enhanced dashboard...")
        try:
            self.dashboard = ttk.Frame(self.master)
            self.dashboard.grid(row=4, column=0, columnspan=12, sticky='nsew', padx=10, pady=10)
            self.logger.info("Dashboard frame created successfully")
            
            self.create_market_overview_panel()
            self.create_signals_panel()
            self.create_performance_panel()
            self.create_quick_actions()
            
            self.logger.info("All dashboard panels initialized")
        except Exception as e:
            self.logger.error(f"Dashboard creation error: {e}")

    def create_market_overview_panel(self):
        overview = ttk.LabelFrame(self.dashboard, text="Market Overview")
        overview.grid(row=0, column=0, columnspan=3, sticky='nsew', padx=5, pady=5)
        
        # Market price ticker
        self.price_label = ttk.Label(overview, text="Current Price:", font=('Arial', 12, 'bold'))
        self.price_label.grid(row=0, column=0, padx=5, pady=5)
        
        # 24h Change indicator with color coding
        self.change_label = ttk.Label(overview, text="24h Change:", font=('Arial', 12))
        self.change_label.grid(row=1, column=0, padx=5, pady=5)
        
        # Volume indicator with progress bar
        self.volume_progress = ttk.Progressbar(overview, length=200, mode='determinate')
        self.volume_progress.grid(row=2, column=0, padx=5, pady=5)

    def create_signals_panel(self):
        self.signals_state = {
            'last_update': None,
            'signal_count': 0,
            'active_signals': []
        }
        
        signals = ttk.LabelFrame(self.dashboard, text="Active Signals")
        signals.grid(row=0, column=3, columnspan=3, sticky='nsew', padx=5, pady=5)
        
        # Signal treeview with debugging info
        columns = ('Time', 'Market', 'Type', 'Strength', 'Action', 'Status')
        self.signals_tree = ttk.Treeview(signals, columns=columns, show='headings', height=8)
        for col in columns:
            self.signals_tree.heading(col, text=col)
            self.signals_tree.column(col, width=100)
    def monitor_ui_performance(self):
        self.ui_metrics = {
            'update_times': [],
            'signal_processing_times': [],
            'render_times': []
        }
        
        def measure_update_time(func):
            def wrapper(*args, **kwargs):
                start = time.time()
                result = func(*args, **kwargs)
                duration = time.time() - start
                self.ui_metrics['update_times'].append(duration)
                if duration > 0.1:  # Slow update threshold
                    self.logger.warning(f"Slow UI update: {func.__name__} took {duration:.3f}s")
                return result
            return wrapper
        
        # Apply to key methods
        self.update_dashboard = measure_update_time(self.update_dashboard)
    def create_debug_panel(self):
        debug_frame = ttk.LabelFrame(self.master, text="Debug Controls")
        debug_frame.grid(row=5, column=0, columnspan=12, sticky='ew', padx=5, pady=5)
        
        ttk.Button(debug_frame, text="Force Update", 
                command=self.force_ui_update).pack(side='left', padx=5)
        ttk.Button(debug_frame, text="Clear Signals", 
                command=self.clear_signals).pack(side='left', padx=5)
        ttk.Button(debug_frame, text="Show Metrics", 
                command=self.show_debug_metrics).pack(side='left', padx=5)


    def create_performance_panel(self):
        performance = ttk.LabelFrame(self.dashboard, text="Performance Metrics")
        performance.grid(row=1, column=0, columnspan=6, sticky='nsew', padx=5, pady=5)
        
        # Win rate gauge
        self.win_rate_canvas = tk.Canvas(performance, width=150, height=150, bg='black')
        self.win_rate_canvas.grid(row=0, column=0, padx=5, pady=5)
        
        # Profit chart
        self.profit_canvas = tk.Canvas(performance, width=300, height=150, bg='black')
        self.profit_canvas.grid(row=0, column=1, padx=5, pady=5)

    def create_quick_actions(self):
        actions = ttk.LabelFrame(self.dashboard, text="Quick Actions")
        actions.grid(row=2, column=0, columnspan=6, sticky='nsew', padx=5, pady=5)
        
        # Quick filter buttons
        ttk.Button(actions, text="Top Gainers", command=lambda: self.quick_filter('gainers')).grid(row=0, column=0, padx=5, pady=5)
        ttk.Button(actions, text="High Volume", command=lambda: self.quick_filter('volume')).grid(row=0, column=1, padx=5, pady=5)
        ttk.Button(actions, text="Strong Signals", command=lambda: self.quick_filter('signals')).grid(row=0, column=2, padx=5, pady=5)

    def quick_filter(self, filter_type):
        if filter_type == 'gainers':
            filtered_markets = self.change('Top')
        elif filter_type == 'volume':
            filtered_markets = self.change('Best-vol')
        elif filter_type == 'signals':
            filtered_markets = self.get_strong_signal_markets()
        
        self.selected_markets = filtered_markets
        self.update_selected_markets_display()

    def get_strong_signal_markets(self):
        strong_signals = []
        for market in self.tickers():
            df = self.fetch_market_data(market, self.choose_time.get())
            if df is not None:
                signals = self.generate_signals(df)
                if any(signal.get('strength', '') == 'high' for signal in signals):
                    strong_signals.append(market)
        return strong_signals

    def update_selected_markets_display(self):
        try:
            self.selected_markets_listbox.delete(0, tk.END)
            for market in self.selected_markets:
                self.selected_markets_listbox.insert(tk.END, market)
        except Exception as e:
            self.logger.error(f"Error updating markets display: {e}")

    def update_market_overview(self):
        if not hasattr(self, 'price_label'):
            return
            
        try:
            if self.selected_markets:
                market = self.selected_markets[0]
                ticker = self.binance.fetch_ticker(market)
                
                self.price_label.config(text=f"Price: {ticker['last']:.8f}")
                
                change = float(ticker['percentage'])
                color = 'green' if change > 0 else 'red'
                self.change_label.config(text=f"24h Change: {change:.2f}%", fg=color)
                
                volume = float(ticker['quoteVolume'])
                max_volume = 100000000  # 100M baseline
                volume_percent = min((volume / max_volume) * 100, 100)
                self.volume_progress['value'] = volume_percent
                
        except Exception as e:
            self.logger.error(f"Error updating market overview: {e}")

    def update_dashboard(self):
        if self.scanning:
            try:
                self.update_market_overview()
                self.status_label.config(text="Updating market overview...", fg='blue')
                
                self.update_signals_display()
                self.status_label.config(text="Updating signals...", fg='blue')
                
                self.update_performance_metrics()
                self.status_label.config(text="Scanner Status: Running", fg='green')
                
                self.master.after(1000, self.update_dashboard)
            except Exception as e:
                self.logger.error(f"Dashboard update error: {e}")
                self.status_label.config(text="Update error - check logs", fg='red')


    def start_scanning(self):
        if not self.scanning:
            self.binance = ccxt.binance({
                'enableRateLimit': True,
                'options': {'defaultType': 'spot'}
            })
            
            self.scanning = True
            self.status_label.config(text="Scanner Status: Running", fg='green')
            
            threading.Thread(target=self.scan_for_signals, daemon=True).start()
            self.send_telegram_update("🚀 Scanner Started - Monitoring Markets")

